package echosentrymiddleware

import (
	"strings"
	"unicode/utf8"

	"github.com/getsentry/sentry-go"
	"github.com/labstack/echo/v4"
)

func limitString(str string, size int) string {
	if len(str) <= size {
		return str
	}

	bytes := []byte(str)

	if len(bytes) <= size {
		return str
	}

	validBytes := bytes[:size]
	for !utf8.Valid(validBytes) {
		validBytes = validBytes[:len(validBytes)-1]
	}

	return string(validBytes)
}

func limitStringWithDots(str string, size int) string {
	if size <= 10 {
		return limitString(str, size)
	}

	result := limitString(str, size-3)

	if result == str {
		return str
	}

	return result + "..."
}

func prepareTagValue(str string) string {
	size := 200 // limit of sentry

	str = strings.ReplaceAll(str, "\n", " ") // no \n in strings

	return limitStringWithDots(str, size)
}

func prepareTagName(str string) string {
	return limitString(str, 32)
}

func setTag(span *sentry.Span, tag, value string) {
	if tag == "" || value == "" {
		return
	}

	span.SetTag(prepareTagName(tag), prepareTagValue(value))
}

func getRequestID(ctx echo.Context) string {
	requestID := ctx.Request().Header.Get(echo.HeaderXRequestID) // request-id generated by reverse-proxy
	if requestID == "" {
		// missed request-id from proxy, got generated one by middleware.RequestID()
		requestID = ctx.Response().Header().Get(echo.HeaderXRequestID)
	}

	return requestID
}
